name: Docker Image CI

on:
  push:
    branches: [ "test" ]
  pull_request:
    branches: [ "test" ]

env:
  IMAGE_NAME: lssalas/edit_car_microservice_image
  CONTAINER_NAME: lssalas_edit_car_microservice_container
  PORT: 3001
  
jobs:

  build:

    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

  deploy_to_ec2:
    name: Deploy Updated Docker Container to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Update and Restart Docker Container
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull --quiet ${{ env.IMAGE_NAME }}:latest
            
            # Verifica si el contenedor ya está corriendo y lo actualiza sin eliminarlo
            if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }})" ]; then
              echo "Container already running, updating..."
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi

            # Elimina imágenes antiguas para liberar espacio
            docker image prune -f

            # Inicia el contenedor con las variables de entorno desde GitHub Secrets
            docker run -d -p ${{ env.PORT }}:${{ env.PORT }} \
              --name ${{ env.CONTAINER_NAME }} \
              -e DB_HOST=host.docker.internal \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e QUERY_CAR_URL=${{ secrets.QUERY_CAR_URL }} \
              ${{ env.IMAGE_NAME }}:latest
